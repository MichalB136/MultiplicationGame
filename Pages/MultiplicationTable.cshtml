
@page
@model MultiplicationGame.Pages.MultiplicationTableModel
@{
    ViewData["Title"] = "Tabliczka mnożenia 10x10";
}

<h2>Tabliczka mnożenia 10x10</h2>
<form id="multiplicationForm" method="post">
    @foreach (var proposal in Model.Proposals ?? new List<int>())
    {
        <input type="hidden" name="proposalsState" value="@proposal" />
    }
    <table class="table table-bordered text-center">
        <thead>
            <tr>
                <th></th>
                @for (int j = 1; j <= 10; j++)
                {
                    <th>@j</th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i <= 10; i++)
            {
                <tr>
                    <th>@i</th>
                    @for (int j = 1; j <= 10; j++)
                    {
                        var idx = ((i-1)*10)+(j-1);
                        string cellClass = "";
                        if (Model.CellCorrectness != null && Model.CellCorrectness.Count == 100 && Model.CellCorrectness[idx] != null)
                        {
                            cellClass = Model.CellCorrectness[idx] == true ? "cell-correct" : "cell-wrong";
                        }
                        <td>
                            <input type="number" name="answers" value="@(Model.Answers != null && Model.Answers[idx] != null ? Model.Answers[idx].ToString() : "")"
                                   class="form-control droppable @(cellClass)" min="1" max="100" data-index="@idx"
                                   ondrop="dropAnswer(event)" ondragover="allowDrop(event)" readonly draggable="true"
                                   ondragstart="dragInputValue(event)" oninput="highlightCell(this)" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary" onclick="setFormPost()">Sprawdź</button>
</form>

<div id="proposals-container">
    @await Html.PartialAsync("ProposalsPartial", Model.Proposals ?? new List<int>())
</div>

@if (Model.Results != null)
{
    <div class="mt-3">
        <h4>Wynik: @Model.CorrectCount/100 poprawnych</h4>
        <ul>
            @foreach (var error in Model.Results)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<style>
    .cell-highlighted { background-color: #fff3cd !important; }
    .cell-correct { background-color: #d4edda !important; }
    .cell-wrong { background-color: #f8d7da !important; }
</style>
<script>
let dragSourceInput = null;
function allowDrop(ev) { ev.preventDefault(); }
function dragAnswer(ev) {
    ev.dataTransfer.setData("text", ev.target.getAttribute("data-value"));
    dragSourceInput = null;
}
function dragInputValue(ev) {
    ev.dataTransfer.setData("text", ev.target.value);
    dragSourceInput = ev.target;
}
function dropAnswer(ev) {
    ev.preventDefault();
    var value = ev.dataTransfer.getData("text");
    if (!/^[0-9]+$/.test(value)) return;
    ev.target.value = value;
    if (dragSourceInput && dragSourceInput !== ev.target) {
        dragSourceInput.value = "";
    }
    dragSourceInput = null;
    highlightCell(ev.target);
    // Po dropie wyślij AJAX do pobrania nowych propozycji
    setTimeout(function() {
        updateProposals();
    }, 100);
}
function setFormPost() {
    var form = document.getElementById('multiplicationForm');
    form.method = 'post';
}
function highlightCell(input) {
    input.classList.remove('cell-correct','cell-wrong');
    input.classList.add('cell-highlighted');
}
</script>
<script>
function updateProposals() {
    var form = document.getElementById('multiplicationForm');
    var formData = new FormData(form);
    // Przekazujemy index ostatnio uzupełnionego pola i wartość
    var lastInput = null;
    var inputs = form.querySelectorAll('input[name="answers"]');
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].value && inputs[i].classList.contains('cell-highlighted')) {
            lastInput = { index: i, value: inputs[i].value };
            break;
        }
    }
    if (lastInput) {
        formData.append('lastFilledIndex', lastInput.index);
        formData.append('lastFilledValue', lastInput.value);
    }
    fetch('/ProposalsPartial', {
        method: 'POST',
        body: formData
    })
    .then(response => response.text())
    .then(html => {
        // Podmień całą sekcję z propozycjami (kafelki + hidden inputy)
        document.getElementById('proposals-container').innerHTML = html;
    });
}
</script>
