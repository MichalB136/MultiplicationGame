@model MultiplicationGame.Pages.IndexModel
<!-- Interactive fragment partial: extracted from Index.cshtml -->
@* This partial expects an IndexModel as its model. Keep it in sync with the page model. *@

@if (Model.GameWon)
{
    <div class="d-flex flex-column align-items-center mt-5">
        <div class="alert alert-success display-5 fw-bold px-5 py-4 text-center" role="alert">
            Gratulacje! Ukończyłeś grę – @MultiplicationGame.Pages.IndexModel.RequiredAnswers poprawnych odpowiedzi z rzędu!
        </div>
        <div class="card shadow-sm mb-3" style="max-width: 420px;">
            <div class="card-body">
                <h5 class="card-title">Historia równań tej próby:</h5>
                <ul class="list-group list-group-flush">
                    @foreach (var entry in Model.HistoryWithCorrectness)
                    {
                        var bgClass = entry.IsCorrect ? "bg-success text-white" : "bg-danger text-white";
                        <li class="list-group-item @bgClass">@entry.Text</li>
                    }
                </ul>
            </div>
        </div>
        <form method="post">
            <input type="hidden" name="Mode" value="@Model.Mode" />
            <input type="hidden" name="Level" value="@Model.Level" />
            <input type="hidden" name="SolvedQuestions" value="" />
            <input type="hidden" name="Streak" value="0" />
            <input type="hidden" name="AttemptsLeft" value="3" />
            <button type="submit" class="btn btn-success btn-lg mt-3">Zagraj ponownie</button>
        </form>
    </div>
}
else if (Model.GameLost)
{
    <div class="d-flex flex-column align-items-center mt-5">
        <div class="alert alert-danger display-5 fw-bold px-5 py-4 text-center" role="alert">
            Przegrałeś! Skończyły się wszystkie życia.
        </div>
        <div class="card shadow-sm mb-3" style="max-width: 420px;">
            <div class="card-body">
                <h5 class="card-title">Historia równań tej gry:</h5>
                <ul class="list-group list-group-flush">
                    @foreach (var entry in Model.HistoryWithCorrectness)
                    {
                        var bgClass = entry.IsCorrect ? "bg-success text-white" : "bg-danger text-white";
                        <li class="list-group-item @bgClass">@entry.Text</li>
                    }
                </ul>
            </div>
        </div>
        <form method="post">
            <input type="hidden" name="Mode" value="@Model.Mode" />
            <input type="hidden" name="Level" value="@Model.Level" />
            <input type="hidden" name="SolvedQuestions" value="" />
            <input type="hidden" name="Streak" value="0" />
            <input type="hidden" name="AttemptsLeft" value="3" />
            <input type="hidden" name="GameLost" value="false" />
            <button type="submit" class="btn btn-danger btn-lg mt-3">Spróbuj ponownie</button>
        </form>
    </div>
}
else if (Model.Question != null)
{
    <div class="mb-2">
        <div class="d-flex justify-content-center align-items-center gap-1">
            @for (int i = 1; i <= 3; i++)
            {
                var heartClass = i <= Model.AttemptsLeft ? "heart-full" : "heart-empty";
                <span class="heart-indicator @heartClass" title="Życie @(i)">❤️</span>
            }
        </div>
        <div class="small text-muted">Pozostałe życia</div>
    </div>
    <form method="post" class="question-form">
        <input type="hidden" name="Mode" value="@Model.Mode" />
        <input type="hidden" name="Level" value="@Model.Level" />
        <input type="hidden" name="A" value="@Model.Question?.A" />
        <input type="hidden" name="B" value="@Model.Question?.B" />
        <input type="hidden" name="Streak" value="@Model.Streak" />
        <input type="hidden" name="SolvedQuestions" value="@Model.SolvedQuestions" />
        <input type="hidden" name="AttemptsLeft" value="@Model.AttemptsLeft" />
        <input type="hidden" name="NextQuestion" id="NextQuestionField" value="false" />
        <input type="hidden" name="HistoryRaw" value="@Model.HistoryRaw" />
        <div class="d-flex justify-content-center align-items-center gap-3 my-4 flex-wrap">
            <div class="display-3 operand-display border border-primary rounded-4 bg-light shadow-sm d-flex align-items-center justify-content-center" style="width:100px;height:100px;">@Model.Question?.A</div>
            <div class="display-3 fw-bold">x</div>
            <div class="display-3 operand-display border border-primary rounded-4 bg-light shadow-sm d-flex align-items-center justify-content-center" style="width:100px;height:100px;">@Model.Question?.B</div>
            <div class="display-3 fw-bold">=</div>
                <div class="display-3 operand-display border border-primary rounded-4 bg-light shadow-sm d-flex align-items-center justify-content-center" style="width:140px;height:100px;">
                    <div class="operand-input" style="width:100%;">
                        <input type="text" name="UserAnswer" required maxlength="10" class="form-control form-control-lg text-center" autocomplete="off" pattern="[0-9]*" @(Model.AnswerChecked && (Model.IsCorrect || Model.AttemptsLeft == 0) ? "readonly" : "") />
                    </div>
                </div>
        </div>
        @if (Model.Mode == MultiplicationGame.Pages.IndexModel.LearningMode.Learning && Model.A > 0 && Model.B > 0)
        {
            var difficultCases = new[] { (6,7), (7,6), (7,8), (8,7), (8,9), (9,8), (6,8), (8,6), (7,9), (9,7) };
            var isDifficult = difficultCases.Contains((Model.A, Model.B));
            <div class="d-flex flex-column align-items-center mb-3">
                <div class="mb-2">
                    <b>Instrukcja:</b> W tym trybie zobaczysz, jak mnożenie to powtarzane dodawanie.<br />
                    Przykład: <span class="text-primary">@Model.A × @Model.B = @Model.A + @Model.A + ... (@Model.B razy)</span><br />
                    Obserwuj, jak kolejne składniki są dodawane i jak powstaje wynik.
                </div>
                <div class="mb-2">Proces mnożenia krok po kroku:</div>
                <div class="addition-steps mb-2" id="additionSteps">
                    @for (int i = 0; i < Model.B; i++)
                    {
                        var terms = string.Join(" + ", Enumerable.Repeat(Model.A.ToString(), i + 1));
                        <div class="fs-5">
                            @terms <span class="text-secondary">= @((i + 1) * Model.A)</span>
                        </div>
                    }
                </div>
                <div class="fs-4 mt-2 mb-2">@Model.A × @Model.B = <span id="finalResult">@((Model.Step >= Model.B-1) ? (Model.A * Model.B).ToString() : "?")</span></div>
                <!-- Animated dot groups -->
                <div class="dot-groups-anim" style="display: flex; gap: 16px; flex-wrap: wrap; justify-content: center;">
                    @for (int i = 0; i < Model.A; i++)
                    {
                        <div class="dot-group" style="display: flex; flex-direction: row; gap: 6px; margin-bottom: 6px;">
                            @for (int j = 0; j < Model.B; j++)
                            {
                                var delay = ((i * Model.B + j) * 0.07);
                                var delayStr = delay.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture);
                                <span class="dot-anim" style="display:inline-block;width:20px;height:20px;background:hsl(@(210 + 20 * i),80%,60%);border-radius:50%;margin:1px;opacity:0;animation: dotIn 0.5s forwards;animation-delay:@(delayStr)s;"></span>
                            }
                        </div>
                    }
                </div>
                <!-- Colorful grid/array diagram -->
                <div class="mt-3 mb-2">
                    <div class="color-grid" style="display:grid;grid-template-columns:repeat(@Model.B,24px);gap:4px;justify-content:center;">
                        @for (int i = 0; i < Model.A; i++)
                        {
                            @for (int j = 0; j < Model.B; j++)
                            {
                                <span style="display:inline-block;width:22px;height:22px;background:hsl(@(120 + 20 * i + 10 * j),70%,70%);border-radius:6px;"></span>
                            }
                        }
                    </div>
                    <div class="text-center small text-muted mt-1">Diagram: @Model.A × @Model.B</div>
                </div>
                @if (isDifficult)
                {
                    <div class="alert alert-info mt-2" style="max-width:340px;">
                        <b>Wskazówka:</b> To trudny przypadek! Spróbuj rozbić na prostsze działania, np. @(Model.A)×@(Model.B) = (@(Model.A)×10) + (@(Model.A)×(@(Model.B-10))) lub zamień kolejność mnożenia.<br />
                        <span class="badge bg-warning text-dark mt-1">Trudne działanie</span>
                    </div>
                }
            </div>
            <div id="learningAutoAdvance" data-step="@Model.LearningStep" data-total="@Model.B" data-a="@Model.A" data-b="@Model.B" data-level="@Model.Level" data-mode="@Model.Mode" data-streak="@Model.Streak" data-solved="@Model.SolvedQuestions" data-attempts="@Model.AttemptsLeft" data-history="@(Model.HistoryRaw?.Replace("\"", "&quot;"))" style="display:none;"></div>
            <style>
                @@keyframes dotIn {
                    from { opacity: 0; transform: scale(0.5); }
                    to { opacity: 1; transform: scale(1); }
                }
            </style>
        }
        @if (Model.AnswerChecked)
        {
            <div class="mt-2 mb-3 d-flex flex-column align-items-center">
                <div class="card shadow-sm border-0 mb-2" style="max-width: 420px;">
                    <div class="card-body text-center p-3">
                        <div class="fs-3 mb-2">
                            <b>@Model.A</b> <span class="mx-1">×</span> <b>@Model.B</b>
                            @if (Model.IsCorrect || Model.AttemptsLeft == 0)
                            {
                                <span class="mx-1">=</span> <b>@Model.CorrectAnswer</b>
                            }
                        </div>
                        <div class="mb-2">
                            Twoja odpowiedź: <b>@Model.UserAnswer</b>
                        </div>
                        <div class="mb-2">
                            Poprawnych odpowiedzi z rzędu: <b>@Model.Streak</b>/@MultiplicationGame.Pages.IndexModel.RequiredAnswers
                        </div>
                        <div class="mb-2">
                            Pozostało prób: <b>@Model.AttemptsLeft</b>/3
                        </div>
                        @if (Model.IsCorrect)
                        {
                            <div class="alert alert-success fw-bold fs-5 mb-2" role="alert">Poprawna odpowiedź! Sukces!</div>
                        }
                        else if (Model.AttemptsLeft == 0)
                        {
                            <div class="d-flex align-items-center justify-content-center gap-3">
                                <div class="alert alert-danger fw-bold fs-5 mb-2 mb-0" role="alert" style="min-width:260px;">3 błędne próby. Poprawny wynik: <b>@Model.CorrectAnswer</b></div>
                                <button type="submit" class="btn btn-danger btn-lg" style="white-space:nowrap;" onclick="document.getElementById('NextQuestionField').value='true';">Spróbuj ponownie</button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger fw-bold fs-5 mb-2" role="alert">Błędna odpowiedź.</div>
                        }
                    </div>
                </div>
            </div>
        }
        @if (Model.GameWon)
        {
            <div class="mt-3">
                <h2 class="text-success">Wygrałeś! @MultiplicationGame.Pages.IndexModel.RequiredAnswers poprawnych odpowiedzi z rzędu!</h2>
                <form method="post">
                    <input type="hidden" name="Level" value="@Model.Level" />
                    <input type="hidden" name="Streak" value="0" />
                    <button type="submit" class="btn btn-success">Zagraj ponownie</button>
                </form>
            </div>
        }
        @if (Model.AnswerChecked && Model.AttemptsLeft > 0)
        {
            <button type="submit" class="btn btn-lg mt-2 @(Model.IsCorrect ? "btn-success" : "btn-warning")" onclick="document.getElementById('NextQuestionField').value='true';">
                @(Model.IsCorrect ? "Następne pytanie" : "Spróbuj ponownie")
            </button>
        }
        else
        {
            <button type="submit" class="btn btn-primary btn-lg mt-2" onclick="document.getElementById('NextQuestionField').value='false';">Sprawdź</button>
        }
    </form>
}

<div class="progress-panel">
    <style>
        /* Inline fallback styles to ensure progress grid renders when external CSS is not yet applied */
        .progress-panel .progress-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(44px, 1fr)); gap: 8px; justify-items: center; align-items: center; width:100%; }
        .progress-panel .progress-square { width:44px; height:44px; border-radius:8px; display:flex; align-items:center; justify-content:center; font-weight:700; color:#6c757d; background:#f8f9fa; border:2px solid #ddd; }
        .progress-panel .progress-square.completed { background: linear-gradient(135deg,#28a745,#20c997); color:#fff; border-color:#28a745; }
        .progress-panel .progress-square.current { background: linear-gradient(135deg,#ffc107,#fd7e14); color:#fff; border-color:#ffc107; }
    </style>
    <h5 class="text-center mb-3">Postęp</h5>
    <div class="progress-grid">
        @for (int i = 1; i <= MultiplicationGame.Pages.IndexModel.RequiredAnswers; i++)
        {
            var isCompleted = i <= Model.Streak;
            var isCurrent = i == Model.Streak + 1 && !Model.IsGameWon;
            <div class="progress-square @(isCompleted ? "completed" : "") @(isCurrent ? "current" : "")">
                @i
            </div>
        }
    </div>
    <div class="text-center mt-3">
        <small class="text-muted">@Model.Streak/@MultiplicationGame.Pages.IndexModel.RequiredAnswers ukończone</small>
    </div>
</div>

<script>
    (function() {
        try {
            var container = document.getElementById('interactiveFragment');
            var searchRoot = container || document;
            var grid = searchRoot.querySelector('.progress-panel .progress-grid');
            if (grid) {
                grid.style.display = 'grid';
                grid.style.gridTemplateColumns = 'repeat(auto-fit, minmax(44px, 1fr))';
                grid.style.gap = '8px';
                grid.style.justifyItems = 'center';
                grid.style.alignItems = 'center';
                grid.style.width = '100%';
            }
        } catch (e) { console && console.warn && console.warn('progress-grid init failed', e); }
    })();
</script>
