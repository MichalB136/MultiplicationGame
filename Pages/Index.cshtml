@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="container-fluid">
    <div class="row">
        <!-- Left / main column -->
        <div class="col-lg-9 col-md-8">
            <div class="text-center">
                <div class="mb-4">
                    <a href="/MemoryGame" class="btn btn-lg btn-warning">Tryb gry pamięciowej: mnożenie</a>
                </div>
                <h1 class="display-4">Gra: Tabliczka Mnożenia</h1>

                <form method="post" class="mb-4">
                    <div class="row mb-2">
                        <div class="col-md-6 mb-2 mb-md-0">
                            <div class="fw-semibold fs-5">Wybierz poziom trudności:</div>
                            <div class="d-flex justify-content-center gap-2 flex-wrap">
                                <input type="hidden" name="Mode" value="@Model.Mode" />
                                <button type="submit" name="Level" value="20" class="btn btn-outline-primary @(Model.Level == 20 ? "active" : "")">Do 20</button>
                                <button type="submit" name="Level" value="40" class="btn btn-outline-primary @(Model.Level == 40 ? "active" : "")">Do 40</button>
                                <button type="submit" name="Level" value="60" class="btn btn-outline-primary @(Model.Level == 60 ? "active" : "")">Do 60</button>
                                <button type="submit" name="Level" value="80" class="btn btn-outline-primary @(Model.Level == 80 ? "active" : "")">Do 80</button>
                                <button type="submit" name="Level" value="100" class="btn btn-outline-primary @(Model.Level == 100 ? "active" : "")">Do 100</button>
                                <button type="submit" name="Level" value="1000" class="btn btn-outline-primary @(Model.Level == 1000 ? "active" : "")">Do 1000</button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="fw-semibold fs-5">Tryb nauki:</div>
                            <select id="modeSelect" class="form-select form-select-lg w-auto d-inline-block" style="min-width:180px;">
                                <option value="Normal" selected="@(Model.Mode == MultiplicationGame.Pages.IndexModel.LearningMode.Normal ? "selected" : null)">Standardowy</option>
                                <option value="Learning" selected="@(Model.Mode == MultiplicationGame.Pages.IndexModel.LearningMode.Learning ? "selected" : null)">Nauka (wyjaśnienia)</option>
                                <option value="Training" selected="@(Model.Mode == MultiplicationGame.Pages.IndexModel.LearningMode.Training ? "selected" : null)">Trening (wybrana tabliczka)</option>
                                <option value="Mixed" selected="@(Model.Mode == MultiplicationGame.Pages.IndexModel.LearningMode.Mixed ? "selected" : null)">Mieszany</option>
                                <option value="Timed" selected="@(Model.Mode == MultiplicationGame.Pages.IndexModel.LearningMode.Timed ? "selected" : null)">Na czas</option>
                            </select>
                        </div>
                    </div>
                </form>

                <!-- AJAX-replaceable fragment: contains question area and progress panel -->
                <div id="interactiveFragment">
                    @await Html.PartialAsync("~/Pages/Shared/_InteractiveFragment.cshtml", Model)
                </div>

            </div>
        </div>

        <!-- Right column can remain empty; progress is inside the partial -->
        <div class="col-lg-3 col-md-4">
        </div>

    </div>
</div>

<script>
    // Cookie helpers and AJAX mode/fragment logic (kept minimal here)
    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + encodeURIComponent(value || "") + expires + "; path=/";
    }
    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
        }
        return null;
    }

    var modeSelect = document.getElementById('modeSelect');
    if (modeSelect) {
        modeSelect.addEventListener('change', async function (e) {
            var newMode = e.target.value;
            try {
                var resp = await fetch('/api/mode', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ mode: newMode })
                });
                if (!resp.ok) { var failUrl = new URL(window.location.href); failUrl.searchParams.set('mode', newMode); window.location.href = failUrl.toString(); return; }
                try { setCookie('mg_mode', newMode, 30); } catch {}
                var fragResp = await fetch('/api/fragment?mode=' + encodeURIComponent(newMode), { credentials: 'same-origin' });
                if (fragResp.ok) {
                    var html = await fragResp.text();
                    var container = document.getElementById('interactiveFragment');
                    if (container) { container.innerHTML = html; try { if (typeof initInteractiveFragment === 'function') initInteractiveFragment(); } catch (ex) { console.warn(ex); } }
                    else { window.location.reload(); }
                } else { window.location.reload(); }
            } catch (ex) { var url = new URL(window.location.href); url.searchParams.set('mode', newMode); window.location.href = url.toString(); }
        });
    }

    // Initialize behaviors after fragment replacement
    async function initInteractiveFragment() {
        var marker = document.getElementById('learningAutoAdvance');
        if (marker) {
            try {
                var step = parseInt(marker.getAttribute('data-step')) || 0;
                var total = parseInt(marker.getAttribute('data-total')) || 0;
                if (step < total - 1) {
                    setTimeout(function() {
                        var form = document.createElement('form'); form.method = 'post'; form.style.display = 'none';
                        var names = ['A','B','Level','Mode','LearningStep','Streak','SolvedQuestions','AttemptsLeft','HistoryRaw'];
                        var values = [marker.getAttribute('data-a'), marker.getAttribute('data-b'), marker.getAttribute('data-level'), marker.getAttribute('data-mode'), (step+1).toString(), marker.getAttribute('data-streak'), marker.getAttribute('data-solved'), marker.getAttribute('data-attempts'), marker.getAttribute('data-history')];
                        for (var i=0;i<names.length;i++) { var input = document.createElement('input'); input.type='hidden'; input.name=names[i]; input.value=values[i]||''; form.appendChild(input); }
                        var nextStep = document.createElement('input'); nextStep.type='hidden'; nextStep.name='NextLearningStep'; nextStep.value='true'; form.appendChild(nextStep);
                        document.body.appendChild(form); form.submit();
                    }, 900);
                }
            } catch (e) { console.warn('learning auto-advance init failed', e); }
        }
    }
    document.addEventListener('DOMContentLoaded', function() { initInteractiveFragment(); });

</script>
